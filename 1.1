#include <stdio.h>
double t=1.7976931348623158e+308;
//эта программа пока что умеет только вычислять минимальное количество операций.
//также это черновик, так что я не писала функции по выделению памяти на массивы


int main() {
    int n;

    printf("введите n")  ;scanf("%d",&n);

    //значит тут дело обстоит так, в массив p[] записывается размер матриц так,
    //что p[0]-это кол-во столбцов в 1 матрице,
    //а дальнейшие элементы это кол-во строк соответствующих матриц

    double m[n][n],s[n][n],p[n];

    for (int j=0;j<n+1;j++){printf("введите %d",j);scanf("%lf",&p[j]);}//заполняем p


    for (int l=0;l<n;l++) {
        for (int i=0;i<n;i++)m[l][i]=0;}//в матрицу m будем записывать количество операций на каждом шаге



    for (int l=1;l<n;l++) {//здесь непосредственно сам код, я долго боролась с тем, чтобы сделать эти вычисления с помощью рекурсии, но результаты были удручающие(
        for (int i=0;i<n-l;i++) {
            int j=i+l;
            m[i][j]=t;//тут всем элементам присваивается максимально возможное значение для double

            for (int k=i;k<j;k++) {
                if ((m[k+1][j]+m[i][k]+p[i] * p[k+1] * p[j+1]) < m[i][j])
                {
                    m[i][j] = m[k+1][j]+m[i][k]+p[i] * p[k+1] * p[j+1];
                    s[i][j] = k;//по идее в эту матрицу будет записываться последовательность с которой мы будем в дальнейшем умножать матрицы,
                    //но я пока не очень разобралась как эта "таблица" будет работать
                }
            }
        }
    }




    for (int j=0;j<=n;j++){for (int i=0;i<=n;i++){printf("%lf  ",m[i][j]);}printf("\n");}

    return 0;
}

//printf("%.2lf  ",m[0][n-1]);
// for (int l=0;l<n;l++) {
// for (int i=0;i<n;i++) {  printf("%lf  ",m[l][i]);}printf("\n");}
                
